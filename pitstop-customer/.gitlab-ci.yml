include:
  - local: '.gitlab-ci-base.yml'
  - template: Jobs/SAST.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/Container-Scanning.gitlab-ci.yml
  - template: DAST.gitlab-ci.yml

variables:
  GITLAB_ADVANCED_SAST_ENABLED: 'true'
  SERVICE_PATH: pitstop-customer
  DOCKER_IMAGE_NAME: pitstop-customer
  ARTIFACTS_PATH: ${SERVICE_PATH}/node_modules/
  SECURITY_JOB: customer-security-scan
  NODE_ENV: production
  CACHE_KEY: ${CI_COMMIT_REF_SLUG}
  YAML_NAME: "backend.yaml"
  # Security thresholds
  CVSS_THRESHOLD_CRITICAL: "9.0"
  CVSS_THRESHOLD_HIGH: "7.0"
  CVSS_THRESHOLD_MEDIUM: "4.0"
  SECURE_LOG_LEVEL: debug
  SCAN_KUBERNETES_MANIFESTS: "true"
  DS_EXCLUDED_PATHS: "spec, test, tests, tmp"

stages:
  - security
  - test
  - build
  - package
  - deploy-k8s

.security_base:
  allow_failure: false
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json
      sast: gl-sast-report.json
      dependency_scanning: gl-dependency-scanning-report.json
      dast: gl-dast-report.json
  rules:
    - when: always

semgrep-sast:
  extends: .security_base
  script:
    - /analyzer run
    - |
      if [ -f gl-sast-report.json ]; then
        HIGH_VULNS=$(cat gl-sast-report.json | jq '[.vulnerabilities[] | select(.severity | IN("Critical", "High"))] | length')
        if [ "$HIGH_VULNS" -gt 0 ]; then
          echo "❌ Found ${HIGH_VULNS} high or critical vulnerabilities"
          exit 1
        fi
      else
        echo "❌ No SAST report found"
        exit 1
      fi

gemnasium-dependency_scanning:
  extends: .security_base
  script:
    - /analyzer run
    - |
      if [ -f gl-dependency-scanning-report.json ]; then
        HIGH_DEPS=$(cat gl-dependency-scanning-report.json | jq '[.vulnerabilities[] | select(.severity >= $CVSS_THRESHOLD_HIGH)] | length')
        if [ "$HIGH_DEPS" -gt 0 ]; then
          echo "❌ Found ${HIGH_DEPS} dependencies with high or critical vulnerabilities"
          exit 1
        fi
      else
        echo "❌ No dependency scanning report found"
        exit 1
      fi

container_scanning:
  extends: .security_base
  stage: security
  script:
    - /analyzer run
    - |
      if [ -f gl-container-scanning-report.json ]; then
        CONTAINER_VULNS=$(cat gl-container-scanning-report.json | jq '[.vulnerabilities[] | select(.severity >= $CVSS_THRESHOLD_HIGH)] | length')
        if [ "$CONTAINER_VULNS" -gt 0 ]; then
          echo "❌ Found ${CONTAINER_VULNS} container vulnerabilities above threshold"
          exit 1
        fi
      else
        echo "❌ No container scanning report found"
        exit 1
      fi

dast:
  extends: .security_base
  variables:
    DAST_FULL_SCAN_ENABLED: "true"
  script:
    - /analyzer run
    - |
      if [ -f gl-dast-report.json ]; then
        DAST_VULNS=$(cat gl-dast-report.json | jq '[.vulnerabilities[] | select(.severity >= $CVSS_THRESHOLD_HIGH)] | length')
        if [ "$DAST_VULNS" -gt 0 ]; then
          echo "❌ Found ${DAST_VULNS} DAST vulnerabilities above threshold"
          exit 1
        fi
      else
        echo "❌ No DAST report found"
        exit 1
      fi

security_gate:
  stage: security
  needs:
    - semgrep-sast
    - gemnasium-dependency_scanning
    - container_scanning
    - dast
  script:
    - |
      for report in gl-*-report.json; do
        if [ -f "$report" ]; then
          VULNS=$(cat "$report" | jq '[.vulnerabilities[] | select(.severity >= $CVSS_THRESHOLD_HIGH)] | length')
          if [ "$VULNS" -gt 0 ]; then
            echo "❌ Security gate failed: Found vulnerabilities above threshold in $report"
            exit 1
          fi
        fi
      done
  allow_failure: false




customer-security-scan:
  extends: .security_scan

build-customer-service:
  stage: build
  image: node:16
  script:
    - cd ${SERVICE_PATH}
    - npm install --production=false
  artifacts:
    paths:
      - ${SERVICE_PATH}/dist/
  cache:
    paths:
      - ${SERVICE_PATH}/node_modules/

package-customer-service:
  extends: .package
  needs:
    - build-customer-service

deploy-k8s-customer-service:
  image: bitnami/git:latest
  stage: deploy-k8s
  before_script:
    # - sleep $((${number} * 60))
    - git config --global user.email "zoulatizakaria3@gmail.com"
    - git config --global user.name "Zakaria-Zoulati"
    # - git config --global credential.helper cache
  script:
    - git clone https://gitlab.com/Zakaria-Zoulati/devops_k8s.git
    - cd devops_k8s/pitstop-k8s/
    - cat backend.yaml
    - COMMIT_HASH=$(echo "$CI_COMMIT_SHA" | cut -c1-8)
    - | 
      sed -i "s|image: $CI_REGISTRY_USER/pitstop-customer\(:.*\)\?|image: $CI_REGISTRY_USER/pitstop-customer:${COMMIT_HASH}|" ${YAML_NAME}
    - cat ${YAML_NAME}
    - git add ${YAML_NAME}
    - git commit -m "microservice manifests versions changes successfully"
    - git remote set-url origin https://oauth2:$ACCESS_TOKEN_REPO@gitlab.com/Zakaria-Zoulati/devops_k8s.git
    - git push origin main  || true
